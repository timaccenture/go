// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: engine/game.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameEngine_MakeMove_FullMethodName = "/engine.GameEngine/MakeMove"
)

// GameEngineClient is the client API for GameEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameEngineClient interface {
	// Sends Move
	MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error)
}

type gameEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewGameEngineClient(cc grpc.ClientConnInterface) GameEngineClient {
	return &gameEngineClient{cc}
}

func (c *gameEngineClient) MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error) {
	out := new(MoveReply)
	err := c.cc.Invoke(ctx, GameEngine_MakeMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameEngineServer is the server API for GameEngine service.
// All implementations must embed UnimplementedGameEngineServer
// for forward compatibility
type GameEngineServer interface {
	// Sends Move
	MakeMove(context.Context, *MoveRequest) (*MoveReply, error)
	mustEmbedUnimplementedGameEngineServer()
}

// UnimplementedGameEngineServer must be embedded to have forward compatible implementations.
type UnimplementedGameEngineServer struct {
}

func (UnimplementedGameEngineServer) MakeMove(context.Context, *MoveRequest) (*MoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedGameEngineServer) mustEmbedUnimplementedGameEngineServer() {}

// UnsafeGameEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameEngineServer will
// result in compilation errors.
type UnsafeGameEngineServer interface {
	mustEmbedUnimplementedGameEngineServer()
}

func RegisterGameEngineServer(s grpc.ServiceRegistrar, srv GameEngineServer) {
	s.RegisterService(&GameEngine_ServiceDesc, srv)
}

func _GameEngine_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameEngineServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameEngine_MakeMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameEngineServer).MakeMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameEngine_ServiceDesc is the grpc.ServiceDesc for GameEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.GameEngine",
	HandlerType: (*GameEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeMove",
			Handler:    _GameEngine_MakeMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine/game.proto",
}
